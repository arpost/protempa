<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapping PUBLIC "-//EXOLAB/Castor Mapping DTD Version 1.0//EN" "http://castor.org/mapping.dtd">
<mapping>
    <description>This file describes how Castor should map between a Protempa query and an XML file that conforms to the protempa_query.xsd
        schema.</description>
    <class name="org.protempa.query.Query">
        <description> This maps the top-level object of a query to the top-level XML element of the corresponding XML document. It pretends that
            dataSourceBackend, knowledgeSourceBackend, algorithmSourceBackend and termSourceBackend are fields of class so that when marshalling a Query object
            to XML, this run-time context information can be captured. When unmarshalling an XML document to a Query object, this information will be ignored
            unless the unmarshaller is configured with appropriate handlers.</description>
        <map-to xml="protempaQuery" element-definition="true"/>
        <field name="dataSourceBackend" type="other" required="false" handler="org.protempa.xml.castor.DataSourceBackendHandler">
            <description>When marshaling this field, the class name of the currently configured back end will be obtained by the field handler consulting the
                appropriate factory class. When unmarshalling, this field is ignored unless the unmarshaller is configured with an appropriate handler. In this
                case, an instance of the named class is created and passed to the handler.</description>
            <bind-xml name="dataSourceBackend" type="string" node="element"></bind-xml>
        </field>
        <field name="knowledgeSourceBackend" type="other" required="false" handler="org.protempa.xml.castor.KnowledgeSourceBackendHandler">
            <description>When marshaling this field, the class name of the currently configured back end will be obtained by the field handler consulting the
                appropriate factory class. When unmarshalling, this field is ignored unless the unmarshaller is configured with an appropriate handler. In this
                case, an instance of the named class is created and passed to the handler.</description>
            <bind-xml name="knowledgeSourceBackend" type="string" node="element"></bind-xml>
        </field>
        <field name="algorithmSourceBackend" type="other" required="false" handler="org.protempa.xml.castor.AlgorithmSourceBackendBackendHandler">
            <description>When marshaling this field, the class name of the currently configured back end will be obtained by the field handler consulting the
                appropriate factory class. When unmarshalling, this field is ignored unless the unmarshaller is configured with an appropriate handler. In this
                case, an instance of the named class is created and passed to the handler.</description>
            <bind-xml name="algorithmSourceBackend" type="string" node="element"></bind-xml>
        </field>
        <field name="termSourceBackend" type="other" required="false" handler="org.protempa.xml.castor.TermSourceBackendHandler">
            <description>When marshaling this field, the class name of the currently configured back end will be obtained by the field handler consulting the
                appropriate factory class. When unmarshalling, this field is ignored unless the unmarshaller is configured with an appropriate handler. In this
                case, an instance of the named class is created and passed to the handler.</description>
            <bind-xml name="termSourceBackend" type="string" node="element"></bind-xml>
        </field>
        <field name="keyIds" type="string" collection="array" required="false" handler="org.protempa.query.QueryCastorKeyIdsHandler">
            <bind-xml name="keyId" node="element" location="keyIDs"/>
        </field>
        <field name="filters" type="org.protempa.backend.dsb.filter.Filter" collection="array" required="false" handler="org.protempa.query.QueryCastorFilterHandler">
            <description>Filters are organized into collections by being chained to each other. Since Castor has no direct support for this kind of collection,
                we access filters through methods that make them appear to be collected into an array.</description>
            <bind-xml auto-naming="deriveByClass" node="element" location="filters"/>
        </field>
        <field name="propIds" type="string" collection="array" required="true" handler="org.protempa.query.QueryCastorPropIdsHandler">
            <bind-xml name="propositionID" node="element" location="propositionIDs" />
        </field>
        <field name="termIds" type="org.protempa.query.And" collection="array" required="false" handler="org.protempa.query.QueryCastorTermIdsHandler">
            <bind-xml name="and" node="element" location="termIDs"/>
        </field>
    </class>
    <class name="org.protempa.query.And">
        <map-to xml="and" element-definition="true"/>
        <field name="anded" type="string" collection="arraylist" required="false">
            <bind-xml name="termID" node="element"/>
        </field>
    </class>
    <class name="org.protempa.backend.dsb.filter.PositionFilter">
        <map-to xml="positionFilter" element-definition="true"/>
        <field name="propositionIds" type="string" collection="array" required="true" get-method="getPropositionIds" set-method="%1">
            <bind-xml name="propositionID" node="element" location="propositionIDs"/>
        </field>
        <field name="start" type="long" required="true" get-method="getStart" set-method="%2">
            <bind-xml name="start" node="attribute" />
        </field>
        <field name="startGranularity" type="string" required="true" get-method="getStartGranularityXMLName" set-method="%3">
            <bind-xml name="startGranularity" node="attribute"/>
        </field>
        <field name="finish" type="long" required="true" get-method="getFinish" set-method="%4">
            <bind-xml name="finish" node="attribute" />
        </field>
        <field name="finishGranularity" type="string" required="true" get-method="getFinishGranularityXMLName" set-method="%5">
            <bind-xml name="finishGranularity" node="attribute"/>
        </field>
        <field name="startSide" type="string" required="false" get-method="getStartSide" set-method="%6">
            <bind-xml name="startSide" node="attribute"/>
        </field>
        <field name="finishSide" type="string" required="false" get-method="getFinishSide" set-method="%7">
            <bind-xml name="finishSide" node="attribute"/>
        </field>
    </class>
    <class name="org.protempa.backend.dsb.filter.DateTimeFilter">
        <map-to xml="dateTimeFilter" element-definition="true"/>
        <field name="propositionIds" type="string" collection="array" required="true" get-method="getPropositionIds" set-method="%1">
            <bind-xml name="propositionID" node="element" location="propositionIDs"/>
        </field>
        <field name="start" type="date" required="true" get-method="getStart" set-method="%2">
            <bind-xml name="start" node="attribute" />
        </field>
        <field name="startGranularity" type="string" required="true" get-method="getStartGranularityXMLName" set-method="%3">
            <bind-xml name="startGranularity" node="attribute"/>
        </field>
        <field name="finish" type="date" required="true" get-method="getFinish" set-method="%4">
            <bind-xml name="finish" node="attribute" />
        </field>
        <field name="finishGranularity" type="string" required="true" get-method="getFinishGranularityXMLName" set-method="%5">
            <bind-xml name="finishGranularity" node="attribute"/>
        </field>
        <field name="startSide" type="string" required="false" get-method="getStartSide" set-method="%6">
            <bind-xml name="startSide" node="attribute"/>
        </field>
        <field name="finishSide" type="string" required="false" get-method="getFinishSide" set-method="%7">
            <bind-xml name="finishSide" node="attribute"/>
        </field>
    </class>
    <class name="org.protempa.backend.dsb.filter.PropertyValueFilter"></class>
    <class name="org.protempa.backend.dsb.filter.ValueFilter"></class>
</mapping>